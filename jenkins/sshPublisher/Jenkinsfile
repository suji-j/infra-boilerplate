pipeline {
    agent any

    environment {
        GITHUB_REPO_URL = 'https://github.com/chatbot-server.git'
        ECR_REPO = '<AWS_ACCOUNT_ID>.dkr.ecr.ap-northeast-2.amazonaws.com/namespace/docker'
        ECR_CREDENTIALS_ID = 'ecr:ap-northeast-2:ecr_credentials_id'
        REMOTE_USER = 'ubuntu'
        SSH_CONFIG_NAME = 'flask-server'
        KAKAO_APP_API_KEY = credentials('KAKAO_APP_API_KEY_ID')
        OPEN_WEATHER_API_KEY = credentials('OPEN_WEATHER_API_KEY_ID')
        WEBHOOK_URL = credentials("Jenkins-Discord-Webhook")
    }


    stages {
        stage('Checkout') {
            steps {
                script {
                    setBuildDescription('Checkout')
                    git branch: 'dev', url: "${GITHUB_REPO_URL}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    setBuildDescription('Build Docker Image')
                    dockerImage = docker.build("${ECR_REPO}:latest")
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    setBuildDescription('Push to ECR')
                    docker.withRegistry("https://${ECR_REPO}", "$ECR_CREDENTIALS_ID") {
                        dockerImage.push("latest")
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    setBuildDescription('Deploy to EC2')
                    try {
                        sshPublisher(publishers: [
                            sshPublisherDesc(
                                configName: SSH_CONFIG_NAME,
                                transfers: [
                                    sshTransfer(
                                        execCommand: """
                                            # ECR Î°úÍ∑∏Ïù∏
                                            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${ECR_REPO}

                                            # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï§ëÏßÄ Î∞è ÏÇ≠Ï†ú
                                            if sudo docker ps -a | grep -q "flask-app"; then
                                                sudo docker stop flask-app || true
                                                sudo docker rm flask-app || true
                                            fi

                                            # Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
                                            if sudo docker images -q ${ECR_REPO}:latest; then
                                                sudo docker rmi ${ECR_REPO}:latest || true
                                            fi

                                            # ÏµúÏã† Ïù¥ÎØ∏ÏßÄ ÌíÄ Î∞è Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
                                            sudo docker pull ${ECR_REPO}:latest
                                            sudo docker run -d -p 5000:5000 --name flask-app -e KAKAO_APP_API_KEY=${KAKAO_APP_API_KEY} -e OPEN_WEATHER_API_KEY=${OPEN_WEATHER_API_KEY} ${ECR_REPO}:latest
                                        """,
                                        remoteDirectory: '',
                                        removePrefix: ''
                                    )
                                ]
                            )
                        ])
                    } catch (Exception e) {
                        echo "Deploy to EC2 failed: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error("Deployment failed. Please check the logs.")
                    }
                }
            }
        }
    }

    post {
        success {
            sendDiscordNotification(
                "${env.JOB_NAME} : ${currentBuild.displayName} ÎπåÎìú ÏÑ±Í≥µ ü§©",
                """
                Ï†úÎ™©: ${currentBuild.displayName}
                Í≤∞Í≥º: ${currentBuild.result}
                Ïã§Ìñâ ÏãúÍ∞Ñ: ${currentBuild.duration / 1000}s
                """
            )
        }

        failure {
            script {
                def failedStageName = currentBuild.description ?: 'Unknown'
                sendDiscordNotification(
                    "${env.JOB_NAME} : ${currentBuild.displayName} ÎπåÎìú Ïã§Ìå® üò≠",
                    """
                    Ï†úÎ™©: ${currentBuild.displayName}
                    Í≤∞Í≥º: ${currentBuild.result}
                    Ïã§Ìå®Ìïú Îã®Í≥Ñ: ${failedStageName}
                    Ïã§Ìñâ ÏãúÍ∞Ñ: ${currentBuild.duration / 1000}s
                    """
                )
            }
        }
        unstable {
            script {
                sendDiscordNotification(
                    "${env.JOB_NAME} : ${currentBuild.displayName} ÎπåÎìú Î∂àÏïàÏ†ï ü§î",
                    """
                    Ï†úÎ™©: ${currentBuild.displayName}
                    Í≤∞Í≥º: ${currentBuild.result} (Î∂àÏïàÏ†ï)
                    Ïã§Ìñâ ÏãúÍ∞Ñ: ${currentBuild.duration / 1000}s
                    """
                )
            }
        }
        aborted {
            script {
                sendDiscordNotification(
                    "${env.JOB_NAME} : ${currentBuild.displayName} ÎπåÎìú Ï§ëÎã® üö´",
                    """
                    Ï†úÎ™©: ${currentBuild.displayName}
                    Í≤∞Í≥º: ${currentBuild.result} (Ï§ëÎã®)
                    Ïã§Ìñâ ÏãúÍ∞Ñ: ${currentBuild.duration / 1000}s
                    """
                )
            }
        }
    }
}


def setBuildDescription(stageName) {
    currentBuild.description = stageName
}

def sendDiscordNotification(String title, String description) {
    withCredentials([string(credentialsId: 'Jenkins-Discord-Webhook', variable: 'DISCORD')]) {
        discordSend description: description,
            link: env.BUILD_URL,
            result: currentBuild.currentResult,
            title: title,
            webhookURL: env.WEBHOOK_URL
    }
}
